---
description:
globs:
alwaysApply: false
---
# K8s MCP Server 專案規則

## 專案範圍
此規則僅適用於 `k8s-mcp/k8s-mcp-server/` 目錄及其子目錄。

## 專案資訊

### 版本資訊
- 當前版本：2.1.1
- Node.js 版本要求：>=18.0.0
- 專案類型：ES6 模組
- 完成度：87.9% (29/33 項功能)

### 依賴套件
- @modelcontextprotocol/sdk: ^1.13.0
- express: ^4.18.2
- zod: ^3.22.4

## 專案架構

### 核心檔案
- 主程式入口：[k8s-mcp/k8s-mcp-server/src/index.js](mdc:k8s-mcp/k8s-mcp-server/src/index.js)
- 主伺服器：[k8s-mcp/k8s-mcp-server/src/server.js](mdc:k8s-mcp/k8s-mcp-server/src/server.js)
- 專案配置：[k8s-mcp/k8s-mcp-server/package.json](mdc:k8s-mcp/k8s-mcp-server/package.json)
- 容器配置：[k8s-mcp/k8s-mcp-server/Dockerfile](mdc:k8s-mcp/k8s-mcp-server/Dockerfile)
- 建構腳本：[k8s-mcp/k8s-mcp-server/build.sh](mdc:k8s-mcp/k8s-mcp-server/build.sh)

### 工具模組 (src/tools/)
- 基底類別：[k8s-mcp/k8s-mcp-server/src/tools/base-tool.js](mdc:k8s-mcp/k8s-mcp-server/src/tools/base-tool.js)
- 資源查詢：[k8s-mcp/k8s-mcp-server/src/tools/kubectl-get.js](mdc:k8s-mcp/k8s-mcp-server/src/tools/kubectl-get.js)
- 日誌查看：[k8s-mcp/k8s-mcp-server/src/tools/kubectl-logs.js](mdc:k8s-mcp/k8s-mcp-server/src/tools/kubectl-logs.js)
- 資源描述：[k8s-mcp/k8s-mcp-server/src/tools/kubectl-describe.js](mdc:k8s-mcp/k8s-mcp-server/src/tools/kubectl-describe.js)
- 叢集資訊：[k8s-mcp/k8s-mcp-server/src/tools/kubectl-cluster-info.js](mdc:k8s-mcp/k8s-mcp-server/src/tools/kubectl-cluster-info.js)
- YAML 配置：[k8s-mcp/k8s-mcp-server/src/tools/kubectl-get-yaml.js](mdc:k8s-mcp/k8s-mcp-server/src/tools/kubectl-get-yaml.js)
- 節點監控：[k8s-mcp/k8s-mcp-server/src/tools/kubectl-top-nodes.js](mdc:k8s-mcp/k8s-mcp-server/src/tools/kubectl-top-nodes.js)
- Pod 監控：[k8s-mcp/k8s-mcp-server/src/tools/kubectl-top-pods.js](mdc:k8s-mcp/k8s-mcp-server/src/tools/kubectl-top-pods.js)
- 容器監控：[k8s-mcp/k8s-mcp-server/src/tools/kubectl-top-containers.js](mdc:k8s-mcp/k8s-mcp-server/src/tools/kubectl-top-containers.js)
- 部署擴縮：[k8s-mcp/k8s-mcp-server/src/tools/kubectl-scale-deployment.js](mdc:k8s-mcp/k8s-mcp-server/src/tools/kubectl-scale-deployment.js)
- 部署重啟：[k8s-mcp/k8s-mcp-server/src/tools/kubectl-restart-deployment.js](mdc:k8s-mcp/k8s-mcp-server/src/tools/kubectl-restart-deployment.js)
- HPA 編輯：[k8s-mcp/k8s-mcp-server/src/tools/kubectl-edit-hpa.js](mdc:k8s-mcp/k8s-mcp-server/src/tools/kubectl-edit-hpa.js)

### 工具函數 (src/utils/)
- 日誌系統：[k8s-mcp/k8s-mcp-server/src/utils/logger.js](mdc:k8s-mcp/k8s-mcp-server/src/utils/logger.js)
- 參數驗證：[k8s-mcp/k8s-mcp-server/src/utils/validator.js](mdc:k8s-mcp/k8s-mcp-server/src/utils/validator.js)
- Kubectl 工具：[k8s-mcp/k8s-mcp-server/src/utils/kubectl.js](mdc:k8s-mcp/k8s-mcp-server/src/utils/kubectl.js)

### 測試檔案
- 主要測試：[k8s-mcp/k8s-mcp-server/test.js](mdc:k8s-mcp/k8s-mcp-server/test.js)
- 標籤篩選測試：[k8s-mcp/k8s-mcp-server/test-label-filter.js](mdc:k8s-mcp/k8s-mcp-server/test-label-filter.js)

## 已完成功能列表 (29項)

### 1. kubectl_get - 資源查詢工具
支援 19 種資源類型：
- **Workload**: pods, deployments, replicasets, daemonsets, statefulsets, jobs, cronjobs
- **Network**: services, ingress
- **Config**: configmaps, secrets
- **Storage**: pv, pvc
- **Scale**: hpa
- **Cluster**: nodes, namespaces, events
- **Security**: serviceaccounts, clusterroles, clusterrolebindings

特殊功能：
- 標籤篩選支援 (labelSelector 和 labels 參數)
- 跨命名空間查詢 (allNamespaces)
- 特定資源查詢 (name 參數)

### 2. kubectl_top_nodes - 節點資源監控
- CPU 和記憶體使用量監控
- 按 CPU/memory 排序
- 需要 metrics-server

### 3. kubectl_top_pods - Pod 資源監控
- Pod 級別 CPU/記憶體監控
- 支援容器級別顯示 (containers 參數)
- 命名空間範圍或跨命名空間查詢

### 4. kubectl_top_containers - 容器資源監控
- 容器級別詳細監控
- 統計摘要功能
- 過濾特定 Pod 或容器名稱

### 5. kubectl_scale_deployment - 部署擴縮
- 副本數量範圍：0-100
- 安全驗證和狀態追蹤
- 等待機制支援 (wait 參數)

### 6. kubectl_restart_deployment - 部署重啟
- 滾動重啟機制
- 零停機時間
- 版本追蹤和狀態對比

### 7. kubectl_edit_hpa - HPA 編輯
- 僅允許修改 minReplicas (1-100) 和 maxReplicas (1-1000)
- 安全的範圍調整
- 影響分析和狀態對比

### 8. kubectl_describe - 資源描述
支援資源：pod, node, service, deployment, configmap, secret, serviceaccount, clusterrole, clusterrolebinding

### 9. kubectl_logs - Pod 日誌
- 指定容器和行數
- 時間範圍篩選 (since 參數)
- 格式化輸出

### 10. kubectl_get_yaml - YAML 輸出
- 資源 YAML 格式匯出
- 支援備份和遷移
- 完整配置和狀態資訊

### 11. kubectl_cluster_info - 叢集資訊
- 控制平面和服務端點
- 可選詳細轉儲 (dump 參數)

## 待開發功能 (4項)

### 操作類功能
- Apply YAML - 應用 YAML 配置
- Create Resource - 創建資源
- Update Resource - 更新資源
- Delete Resource - 刪除資源

## n8n 整合支援

### SSE 連接設定
- **端點**: `http://localhost:3001/sse`
- **訊息端點**: `http://localhost:3001/messages`
- **健康檢查**: `http://localhost:3001/health`

### 常用工具呼叫範例
```json
// 取得 Pod 列表
{"tool": "kubectl_get", "params": {"resource": "pods", "namespace": "default"}}

// 標籤篩選
{"tool": "kubectl_get", "params": {"resource": "pods", "labelSelector": "app=nginx"}}

// 擴縮 Deployment
{"tool": "kubectl_scale_deployment", "params": {"deploymentName": "web-app", "replicas": 3}}

// 查看 Pod 日誌
{"tool": "kubectl_logs", "params": {"pod": "my-pod", "lines": 100}}

// 監控節點資源
{"tool": "kubectl_top_nodes", "params": {"sortBy": "cpu"}}
```

## Docker 部署配置

### 重要掛載點
- **kubeconfig**: `/home/nodejs/.kube/config` (只讀掛載)
- **服務帳戶**: `/var/run/secrets/kubernetes.io/serviceaccount` (叢集內部署)

### 權限要求
- 容器以 nodejs 使用者 (UID 1001) 運行
- kubeconfig 檔案需要適當的讀取權限
- 建議使用唯讀權限的 service account

### 部署範例
```bash
# 本機 kubeconfig
docker run -p 3001:3000 \
  -v ~/.kube/config:/home/nodejs/.kube/config:ro \
  k8s-mcp-server

# Kubernetes 內部署
docker run -p 3001:3000 \
  -v /var/run/secrets/kubernetes.io/serviceaccount:/var/run/secrets/kubernetes.io/serviceaccount:ro \
  -e KUBERNETES_SERVICE_HOST \
  -e KUBERNETES_SERVICE_PORT \
  k8s-mcp-server
```

### 環境變數
- `NODE_ENV`: 執行環境 (development/production)
- `LOG_LEVEL`: 日誌等級 (debug/info/warn/error)
- `PORT`: HTTP 模式端口 (預設 3000)

## API 端點

### 健康檢查
- **GET** `/health` - 服務健康狀態檢查

### SSE 連接 (n8n 專用)
- **GET** `/sse` - Server-Sent Events 連接端點
- **POST** `/messages` - MCP 訊息處理端點

## 開發規範

### 程式碼風格
- 使用 ES6 模組語法 (`import/export`)
- 所有註解和變數名稱使用繁體中文
- 檔案開頭必須包含功能說明註解
- 使用 4 空格縮排
- 不要使用任何 emoji/icon
- 使用 async/await 處理異步操作
- 類別使用 PascalCase，函數使用 camelCase
- 檔案名使用 kebab-case

### 檔案結構規範
- `src/index.js`: 主程式入口，處理生命週期
- `src/server.js`: MCP + Express 整合
- `src/tools/`: 工具實現，繼承 BaseTool
- `src/utils/`: 共用工具函數

### 工具開發規則
1. 所有新工具必須繼承 `BaseTool` 類別
2. 檔案命名：`kubectl-{動作}.js`
3. 必須實作方法：
   - `getDefinition()` - 返回工具定義和 JSON Schema
   - `execute(args)` - 執行工具邏輯
4. 使用 `this.createResponse()` 格式化輸出
5. 使用 `this.logSuccess()` 和 `this.logError()` 記錄

### 安全要求 (最高優先級)
- 所有輸入必須通過 `validator.validateInput()` 驗證
- 禁止的字符：`;` `&` `|` `>` `<` `` ` `` `$` `(` `)`
- 資源名稱必須符合 Kubernetes 規範
- 輸入長度限制：1000 字符
- 允許的 kubectl 操作：
  - 讀取操作：`get`, `describe`, `logs`, `top`
  - 受控管理操作：
    - `scale` (僅限 deployment，副本數 0-100)
    - `rollout restart` (僅限 deployment)
    - `patch` (僅限 hpa minReplicas/maxReplicas，範圍 1-1000)
- 強制 JSON 輸出格式 (除了 scale、restart 和 edit hpa 操作)
- 30 秒執行超時
- 不要使用 eval() 或類似的動態執行
- 不要直接執行使用者輸入的字串

### 錯誤處理規範
- 統一使用 try-catch 包裝
- 錯誤回應格式: `{ content: [{ type: 'text', text: '錯誤: ...' }] }`
- 記錄所有錯誤到日誌
- 提供使用者友好的錯誤訊息
- 詳細的除錯資訊
- 一致的錯誤格式

## 執行環境

### 開發指令
```bash
cd k8s-mcp/k8s-mcp-server
npm run dev          # 開發模式 (詳細日誌)
npm start            # stdio 模式
npm run start:http   # HTTP/SSE 模式 (n8n 用)
npm test            # 執行基本測試
npm run test:labels # 執行標籤篩選測試
npm run test:all    # 執行所有測試
```

### Docker 指令
```bash
cd k8s-mcp/k8s-mcp-server
npm run docker:build   # 建構映像
npm run docker:run     # 執行容器
npm run docker:stop    # 停止容器
npm run docker:logs    # 查看日誌
./build.sh [tag]       # 自定義建構
```

## 疑難排解

### 常見問題
- **kubectl 找不到**: 確保 PATH 包含 kubectl
- **權限錯誤**: 檢查 kubeconfig 設定和檔案權限
- **SSE 連接失敗**: 確認防火牆和端口設定
- **Docker 網路問題**: 使用 `host.docker.internal` (Mac/Windows) 或 `172.17.0.1` (Linux)
- **metrics-server 錯誤**: 安裝 metrics-server 或使用 `--kubelet-insecure-tls`

### 除錯指令
```bash
# 健康檢查
curl http://localhost:3001/health

# 測試 SSE 連接
curl -N http://localhost:3001/sse

# Docker 日誌
docker logs k8s-mcp-server

# 開發模式詳細日誌
LOG_LEVEL=debug npm run dev
```

## 新增工具步驟

1. 在 `src/tools/` 創建 `kubectl-{動作}.js`
2. 繼承 `BaseTool` 並實作必要方法
3. 在 `src/server.js` 中匯入和註冊工具
4. 更新 `availableTools` 陣列
5. 新增對應測試案例
6. 更新 README.md 文檔
7. 執行 `npm test` 驗證

### 新增工具模板
```javascript
import { BaseTool } from './base-tool.js';

export class NewTool extends BaseTool {
  constructor() {
    super('tool_name', '工具描述');
  }

  getDefinition() {
    return {
      name: this.name,
      description: this.description,
      inputSchema: {
        type: 'object',
        properties: { /* 參數定義 */ },
        required: [/* 必填參數 */]
      }
    };
  }

  async execute(args) {
    try {
      this.validateInput(args);
      // 實現邏輯
      const result = await someOperation(args);
      this.logSuccess(args, result);
      return this.createResponse(result);
    } catch (error) {
      this.logError(args, error);
      return this.createErrorResponse(error.message);
    }
  }
}
```

## 開發約束和原則

### 不要修改的檔案
- 基礎架構檔案 (index.js, server.js 的核心結構)
- 安全驗證機制 (validator.js 的核心邏輯)

### 必須遵循的原則
1. **安全第一**: 所有新功能都要通過安全檢查
2. **簡潔優先**: 保持程式碼簡潔易懂
3. **模組化**: 新功能應該是可獨立測試的模組
4. **向後相容**: 不破壞現有功能

### 禁止事項
- 不要使用 eval() 或類似的動態執行
- 不要直接執行使用者輸入的字串
- 不要移除現有的安全檢查
- 不要加入不必要的依賴項
- 不要修改 Docker 基礎配置除非必要

## 測試規則

### 測試檔案
- [k8s-mcp/k8s-mcp-server/test.js](mdc:k8s-mcp/k8s-mcp-server/test.js) - 基本功能測試
- [k8s-mcp/k8s-mcp-server/test-label-filter.js](mdc:k8s-mcp/k8s-mcp-server/test-label-filter.js) - 標籤篩選測試

### 測試要求
- 新增工具必須包含測試案例
- 測試前確保 kubectl 可用
- 使用 `npm test` 執行所有測試
- 安全性測試是必要的

## 常見任務模板

### 新增 kubectl 指令支援
1. 在 `src/tools/` 建立新工具檔案
2. 繼承 `BaseTool` 並實現方法
3. 在 `src/server.js` 註冊工具
4. 更新文檔

### 擴展資源類型
1. 修改 `KubectlGetTool` 的資源驗證
2. 更新 `inputSchema` 的 enum
3. 測試新資源類型

### 改善錯誤處理
1. 在相關工具中加強錯誤檢查
2. 提供更清楚的錯誤訊息
3. 確保日誌記錄完整

## 部署注意事項

### Docker 部署
- 映像包含 kubectl 工具
- 需要掛載 kubeconfig 或使用服務帳戶
- 預設以非 root 使用者執行
- 健康檢查端點：`/health`

### 安全考量
- 不要在映像中包含機敏的 kubeconfig
- 使用 Kubernetes 服務帳戶進行認證
- 限制容器的網路存取權限

## 開發 Prompts 模板

### 新增功能
```
我想新增一個新的 kubectl 工具來支援 [功能描述]。

請：
1. 建立新的工具類別檔案
2. 在 server.js 註冊
3. 確保安全驗證
4. 提供測試方法

要求：
- 繼承 BaseTool
- 通過輸入驗證
- 包含錯誤處理
- 記錄操作日誌
```

### 擴展現有功能
```
我想在現有的 KubectlGetTool 中加入對 [資源類型] 的支援。

請：
1. 修改資源類型驗證
2. 更新 schema 定義
3. 測試新資源
4. 確保安全性

注意：
- 不要破壞現有功能
- 保持一致的錯誤處理
- 更新相關文檔
```

### 安全改進
```
我想加強 [特定功能] 的安全性。

請：
1. 分析當前安全機制
2. 識別潛在風險
3. 提供改進方案
4. 加入測試驗證

重點：
- 輸入驗證
- 指令限制
- 錯誤處理
- 日誌記錄
```

### 錯誤處理改善
```
我想改善 [功能] 的錯誤處理和使用者體驗。

請：
1. 分析現有錯誤情況
2. 提供更清楚的錯誤訊息
3. 加強異常處理
4. 改善日誌記錄

要求：
- 使用者友好的錯誤訊息
- 詳細的除錯資訊
- 一致的錯誤格式
```
